02013/05/25

C arrow operator - used for accessing members of structure using pointer variable

struct student          |   struct student
{                       |   {
    char name[20],      |       char name[20],
    int roll;           |       int roll;
}std;                   |   }*ptr;

Access Structure Member
std.name  |  ptr->name
std.roll  |  ptr->roll

Program:
-------------------------------------------------
#include<stdio.h>
#include<malloc.h>

struct emp {
   int eid;
   char name[10];
}*ptr;

int main() {
   int i;

   printf("Enter the Employee Details : ");
   ptr = (struct emp *) malloc(sizeof(struct emp));

   printf("\nEnter the Employee ID : ");
   scanf("%d", &ptr->eid);
   printf("\nEnter the Employee Name : ");
   scanf("%s", ptr->name);

   printf("\nEmployee Details are : ");
   printf("\nRoll Number : %d", ptr->eid);
   printf("\nEmployee Name : %s", ptr->name);

   return (0);
}
-------------------------------------------------

struct test
{
    int a;
    int b;
} __attribute__((__packed__))
The packed attribute means "Do not insert paddings between members"
Default:
+---------+---------+
| m1 |~~~~|   m2    |
+---------+---------+
Packed
+---------+---------+
| m1 |   m2    |~~~~
+---------+---------+

Difference between union and struct:
union - Only supposed to use one of the elements, because they're all stored at the same spot. This makes it useful when you want to store something that could be one of several types.
struct- Has a separate memory location for each of its elements and they all can be used at once
e.g.
union foo {
  int a;   // can't use both a and b at once
  char b;
} foo;
union foo x;
x.a = 0xDEADBEEF;
x.b = 0x22;
printf("%x, %x\n", x.a, x.b);
prints
deadbe22, 22
You can clearly see where the 0x22 overwrote the 0xEF.

So sizeof(union foo) will give you the largest size of the member.

Allocate a requested memory and returns a pointer to it
Parameters:
    size - This is the size of the memory block, in bytes.

#include <stdlib.h>
malloc(sizeof(int)*10)
