2013/11/30

    内嵌汇编 , 可以去看gcc文档
    汇编不会优化，但是编译会优化，所以内嵌有可能优化，所以需要家 __volatile__
    内嵌汇编指令必须以字符串
    立即数  #10    立即数规则: 1.这个数必须小于等于255 
                            2.经过循环右移偶数位之后小于等于255
    内嵌汇编语法,  三个冒号     可以用 gcc -S test.c -o test.s 来看汇编的结果，查看生成的.s 找到APP
        ：   声明输出变量 "=&r"(out),"=&r"(out1) 和输入输出变量 "+r"(in_out)   用逗号区分  (输出变量只能写不能读，就算读也不能保证值正确)  
                “=“表示输出，"+"表示输入输出，"&"表示不使用输入过程中使用的寄存器，也就是这个输出变量要独自占用一个寄存器
        ：   声明输入变量和变量地址("m"())                                       
                    // %0 , %1 %2 代表从声明输出变量开始到输入变量 从左到右，从上到下  的对应关系，这种写法拓展性不好，可用  %[hello]   ：  [hello]"=&r"(out) 代替  
        ：  保护变量  －－保护寄存器，如果用到了会在用之前压栈保护

    c中 用register把一个变量放在寄存器里 长期占用寄存器，不能过多这样的变量，因为寄存器数量有限,   比放在内存速度快，所以如果要一直重复使用可以放在寄存器，cpu访问寄存器快，cpu访问内存需要走左线，所以慢
        /* 寄存器没有地址 */
        register unsigned int tmp asm("sp");
        register unsigned int tmp1 asm("r0");
        printf("tmp = %x\n",tmp);
    arm指令定长 32位   

    mov 赋值  ［cond］[opcode mov][][][imm8 3] / [cond][opcode mov][r][r][shift][imm] 前四位条件，opcode表示运算符,两个寄存器，最后一个有八位放数所以能写小于 255的立即数
    mvn 取反 "mvn r0,#0\n" //r0=~0
    add 加法                "add r0,r0,r1\n" //r0=r0+r1,前两个必须是寄存器，第三个可以是寄存器或者立即数 (adds adc) 进位加法
    sub 减法                "sub %0,r0,#15\n" //%0=r0-15  前两个必须是寄存器，第三个可以是寄存器或者立即数   (subs sbc) 减法借位
    rsb 翻转减法       "rsb %0,r0,r1\n" // %0=r1-r0  (rsbs  rsc) 翻转减法借位
    mul 乘法  "mul %0,r0,r1\n"  三个位置都必须是寄存器   %0=r0*r1 [cond][opconde mul][][][] 所以只能是三个寄存器
    mla 乘加     四个必须都是寄存器 "mla %0,r0,r1,r2\n" //%0=r0*r1+r2 
    cmp 比较大小
    我们的板子不支持除法 8>>1  或者用减法代替      有些板子会有div指令 "div %0,r0,r1\n"
    
    
        借位加法  CPSR 
            NZCVQ
            C语言中 加法：最高位产生进位会Set C,否则Clear c
                     减法 ：最高位产生借位会Clear c, 否则Set c
            前提是加法和减法指令后必须+s ，即adds/subs 才能将进位 Set C/借位Clear C               
                "mvn r0,#0\n" //r0=~0; （按位取反 32位 2^32-1）
                "adds %0, r0, #1\n" //Set C （加1后，进位，全变成0）
                "mov r0,#1\n"
                "adc %1,r0,#3\n"//%1=r0+3+C
                :"=&r"(out),"=&r"(out1)
                :
                :"r0"
            输出结果为 0 ， 5
            所以adds 和 adc 是配合使用的

            减法借位
                "mov r0,#0\n"
                "subs %0,r0,#1\n"//Clear C
                "mov r0,#20\n"
                "sbc %1,r0,#15\n"//%1=r0-15-!C 逻辑取反! 0=1 , ! 1=0
                
            结果为ffffffff,4

条件执行:
    arm指令支持条件执行
    thumb指令中出了跳转指令(b)其他指令都不支持条件执行       thumb=%65 arm 占的内存小一些

    指令后可以加条件 如 addlt,movgt 表示标志位满足条件时执行
    lt 小于
    gt 大于
    eq 等于
    le 小于等于
    ge 大于等于
    ne 不等于
    
    比较指令不需要+s就可以影响cpsr的标志位

    cmp 比较

    if(a>b){   a-b---> CPSR：NZ
        c=100;  //N==0
    }else{
        c=200;  //N==1 || Z==1
    }
    
    ==>
     "cmp %1,%2\n"//%1-%2 --> NZ
      "movgt %0,#100\n" //N==0 Z==0
    "movlt %0,#200\n" //N==1 
    "moveq %0,#200\n" //Z==1
    :"=&r"(c)
    :"r"(a),"r"(b)
    :
    movgt / movlt /moveq 只去判断标志位 无论谁影响了标志位都行

    tst r0,#(1<<20) 用来测试r0 的第二十位是否等于0    /*按位与*/   影响 Z 
    teq r0,#20 用来测试r0是否等于20   /*按位异或*/   影响 Z 
    
    "mov r0,#0xff00\n"
    "tst r0,#(1<<10)\n"
    "moveq %0,#1\n"
    "movne %0,#2\n"
    :"=&r"(out)
    :
    :"r0"
    结果为 2

逻辑指令
    and %0,r0,r1   //%0=r0&r1  位与
    orr %1,r0,r1   //%1=r0|r1  位或
    eor %2,r0,r1   //%2=r0^r1  异或
    bic %3,r0,#(1<<3) //%3=r0&(~(1<<3)) 按位与(取反)    位清除指令 bit clear

移位指令  一般作为一个其他指令的操作数来使用
    
    "mov r0,#20\n"
    "mov %0,r0,lsl #1\n" //%0= r0 << 1

    lsl 逻辑左移    
    lsr 逻辑右移  有可能能影响符号
    asr 算术右移  最高位移动后会会
        "mov r0,#-10\n"
        "mov %2,r0,asr #1\n"
        00000...1010  //#10
        10000....1010
        11111......0110 //#-10
        11111...1011
        10000...0101   
    ror 循环右移   转圈移位

CPSR 寄存器操作
    mrs %0,cpsr   //%0=cpsr
    mrs => m->mov,r->寄存器  s->cpsr
    msr cpsr,r0\n // 表示cpsr=r0  `
    例如 cpsr = 60000010
        0110 00....00 10000
        NZCV QJ EIFT M［4：0］
        // E 大端小端  IF 中断默认都开着， T表示是arm状态  ， usr     usr能改变 NZCV Q 

    /*看头文件，光标定义到头文件输入gf,进入,ctrl+o返回上一级*/

软中断  swi==svc
    C 中 所有系统调用都是 syscall() --> swi  例如  char* s="nihao\n";　syscall(4,1,s,6);等价于调用了write(1,s,6) ==> "swi 0x900004\n"
        作为数组偏移
        restart --->sys_restart 0   0
        exit    --->sys_exit    4   1
        fork    --->sys_fork    8   2
        read    --->sys_read    12  3
        wirte   --->sys_write   16  4
    swi/svc都可以. 
        "mov r0,#1\n"
        "mov r1,%0\n"
        "mov r2,#6\n"
        
        "swi 0x900004\n"
        
    


