2013/04/20
Forgotten root password:
============================================================
Red Hat
Method One: Reset root password by grub
1.At the boot loader menu, use the arrow keys to highlight the installation you want to edit and type [A] to enter into append mode.
2. You are presented with a prompt that looks similar to the following:
    grub append> ro root=LABEL=/
3.Press the Spacebar once to add a blank space, then add the word single to tell GRUB to boot into single-user Linux mode. The result should look like the following:
    ro root=LABEL=/ single
4.Press [Enter] and GRUB will boot single-user Linux mode. After it finishes loading, you will be presented with a shell prompt similar to the following:
    sh-2.05b#
5.You can now change the root password by typing
    pwsswd root

Method Two:
1.insert CD -> continue
2.df -h -> get mount information
3.cd /mnt/sysimage/etc/
4.ls passwd -> will show user info
5.ls shadow -> will show password info
6.grep root passwd
7.grep root shadow -> code in the front is password
8./mnt/sysimage/sbin/grub-md5-crypt --grub-shell=/mnt/sysimage/sbin/grub -> gernerate password
9.replace the password that come from "grep root /mnt/sysimage/etc/shadow"
10.reboot
============================================================
============================================================
ubuntu
1.Press F12 or hold the Shift key when the BIOS has finished loading to enter GRUB menu
2.Select the line which starts with "Advanced options"
3.Select the line ending with "(recovery mode)",probably the second line, something like:
    Ubuntu GNU/Linux, with Linux 3.8.0-26-generic (recovery mode)
4.Press e to the edit mode. Replace the "ro recovery nomodeset" with "rw single init=/bin/bash"(making root partition read/write)
*(Or you can remount later with command "mount -o remount,rw /")
5.Press F10 or "Ctrl + x" to boot the recovery mode
6.Change the password by typing
    passwd root

However, if you know any of the passwords, you can use "sudo passwd root" to change the root password
============================================================

Shell

Environment variables
env - run a program in a modified environment or show environment variables without argument
set - print the name and value of each shell variable.
HH=123456 - set a local variable
export NN=12345 - set an environment variable
echo $HH -> Show the value of HH

pstree - display a tree of processes
e.g.
1.bash
2.pstree | grep bash - will show something like this. |-bash---bash-+-grep

set | grep "PS.=" -> Show what will shell output look like
========================================
[sa@localhost ~]$ set | grep PS
GROUPS=()
PS1='[\u@\h \W]\$ '
PS2='> '
PS4='+ '
========================================
Edit PS1 to modify output format
PS1='[\u@\h \t \W]\n\$

Search in the manual
man man
/test -> will search test in the manual

Add new path to $PATH
echo $PATH
1.PATH = /usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/sa/bin:/****/
2.PATH = $PATH:/home/blues/bin

echo $? -> print the return value of the last executed command
0 (default "success" return value)
1~255 failure
$#  Stores the number of command-line arguments that were passed to the shell program.
$0  Stores the first word of the entered command (the name of the shell program).
$*  Stores all the arguments that were entered on the command line ($1 $2 ...).
$@  Stores all the arguments that were entered on the command line, individually quoted ("$1" "$2" ...).
$$  Stores current pid
e.g.
[sa@localhost shell]$ ./args.sh 11 22 33 44 55
echo $# -> 5            
echo $@ -> 11 22 33 44 55
echo $* -> 11 22 33 44 55
echo $1 -> 11
echo $2 -> 22
echo $3 -> 33

history - Display or manipulate the history list

test - check file types and compare values
-f FILE exists and is a regular file
-e FILE exists
e.g.
test 100 -gt 500
echo $?

echo $[100+105] - calculate integer. (+-*/%) can also be used 

bc - An arbitrary precision calulator language
e.g.
echo "scale=20;10/3" | bc - calculte float

$RANDOM is an internal Bash function that returns a pseudorandom integer in the range 0-32767. It should not be used to generate an encryption key
echo $RANDOM - generate a random integer

/dev/null is the bit-bucket:the place where you dump anything you don't need

ping from 192.168.1.1 to 192.168.1.254
vim ping.sh
<=======================================
#!/bin/bash
NUM=1
while test $NUM -le 254
do
(
    ping 192.168.1.$SUM -c1 -W1 &> /dev/null
    if test $? -eq 0
    then                  
      echo 192.168.1.$NUM
    fi
) &
    NUM = $[$NUM + 1]
done
========================================>

for
<=======================================
for I in 1 2 3 4

for I in `seq 1 254`
do
done
========================================>

seq -  print a sequence of numbers.
-w equalize width by padding with leading zeroes
e.g.
seq 1 10 will print "1 2 3 4 5 6 7 8 9 10"
seq -w 1 10 will print "01 02 03 04 05 06 07 08 09 10"

${MM:-abc} set abc to MM
More information by searching "Parameter expansion"
========================================
a=1134322
echo ${a#1*3} will print that value from a from the first 3 (exclusive) - 4322
echo ${a##1*3} will print that value from a from the last 3 (exclusive) - 22
echo ${a:3:1} will print one char from a at index 3 - 4

#!/bin/bash
DIR="/home/sa/tmp/"
NUM=1
cd $DIR

for I in `ls $DIR`
do
    echo $I
    STR=${I:0:1}
    mv $I $STR$I
done
cd -
=======================================>
cat abc & - & makes command run in the background
Ctrl + z - suspends a process(SIGTSTP), putting it in the background
jobs - Show the active jobs in the shell
fg [%job_id] - continues a stopped job
bg [%job_id] - resumes suspended jobs while keeping them running in the background

data - print or set the system date and time

switch   
$1 below means the first input
<=======================================
#!/bin/bash
ARGV=$1
case $ARGV in
-l)
    ls -l
    ;;
-h)
    ls -h
    ;;
*)
    ls
    ;;
esac
========================================>

rsync - a fast, versatile, remote (and local) file-copying tool
-a, --archive   archive mode
-v, --verbose   increase verbosity
-u, --update    skip files that are newer on the receiver
--delete        delete extraneous files from dest dirs - delete the file from TARGET which are removed from SOURCE after syncing.

backup files
<========================================
#!/bin/bash
USER="blue"
HOST="192.168.1.253"
SRCDIR="/home/blues/Bridging/"
DESTDIR="/root/Bridging/
BACKUPDIR="root/backupdir/"

mkdir -p $BACKUPDIR
DATE=`date+%F_%T`

rm -rpf /tmp/rsync.flag
(
tar zcf ${BACKUPDIR}Bridging$DATE.tar.gz $DESTDIR  &>/dev/null


if [$? -eq 0]
then
    if [-f ${BACKUPDIR}Bridging$DATE.tar.gz]
        then
            echo "backup success"
            touch -p /tmp/rsync.flag
        fi
    else
        echo "backup fail"
        touch -p /tmp/rsync.flag
        exit 1
    fi
fi
) &
while true
do
    echo `data_%F_%T`
        du -sh ${BACKUPDIR}Bridging$DATE.tar.gz
    sleep 1
        clear
    if[-e /tmp/rsync.flag]
        then
            break
    fi
done
rsync -a --update --delete $USER@$HOST:$SRCDIR $DESTDIR
rm -rpf /tmp/rsync.flag
=========================================>
