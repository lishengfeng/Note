2013/06/02

A CPP file is a source code file witten in C++, a popular programming language that add features such as object-oriented programming to C

Compile a CPP file:
g++ a.cpp -o a
Object Oriented Programming
Object-oriented programming is a programming paradigm that uses abstraction (in the form of classes and objects) to create models based on the real world environment.  An object-oriented application uses a collection of objects, which communicate by passing messages to request services.  Objects are capable of passing messages, receiving messages, and processing data.  The aim of object-oriented programming is to try to increase the flexibility and maintainability of programs.  Because programs
created using an OO language are modular, they can be easier to develop, and simpler to understand after development.


Object Oriented Programming vs. Procedural Programming
Programs are made up of modules, which are parts of a program that can be coded and tested separately, and then assembled to form a complete program.  In procedural languages (i.e. C) these modules are procedures, where a procedure is a sequence of statements.  In C for example, procedures are a sequence of imperative statements, such as assignments, tests, loops and invocations of sub procedures.  These procedures are functions, which map arguments to return statements.
 
The design method used in procedural programming is called Top Down Design.  This is where you start with a problem (procedure) and then systematically break the problem down into sub problems (sub procedures).  This is called functional decomposition, which continues until a sub problem is straightforward enough to be solved by the corresponding sub procedure.  The difficulties with this type of programming, is that software maintenance can be difficult and time consuming.  When changes are
made to the main procedure (top), those changes can cascade to the sub procedures of main, and the sub-sub procedures and so on, where the change may impact all procedures in the pyramid.
 
One alternative to procedural programming is object oriented programming. Object oriented programming is meant to address the difficulties with procedural programming.  In object oriented programming, the main modules in a program are classes, rather than procedures.  The object-oriented approach lets you create classes and objects that model real world objects. 


The focus of procedural programming is to break down a programming task into a collection of variables, data structures, and subroutines, whereas in object-oriented programming it is to break down a programming task into objects that expose behavior (methods) and data (members or attributes) using interfaces. The most important distinction is that while procedural programming uses procedures to operate on data structures, object-oriented programming bundles the two together, so an "object",
    which is an instance of a class, operates on its "own" data structure.

Nomenclature varies between the two, although they have similar semantics:
Procedural          Object-oriented
procedure           method
record              object
module              class
procedure call      message

Procedural-oriented:
    Data:Structure
    Function

Object-oriented
    Class  - A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.
    Object - Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors â€“ wagging the tail, barking, eating. An object is an instance of a class.
        1.Encapsulation - Encapsulation is an Object Oriented Programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse.
        2.Inheritance   - Languages that support classes almost always support inheritance. This allows classes to be arranged in a hierarchy that represents "is-a-type-of" relationships.
        3.Polymorphism  - Subtyping, a form of polymorphism, is when calling code can be agnostic as to whether an object belongs to a parent class or one of its descendants.


Memory Layout of C program
    high address----------------------
                |                    | command-line arguments
                |                    | and environment variables
                ----------------------
                |        stack       |
                ......................
                |          |         |
                |          v         |
                |                    |
                |                    |
                |                    |
                |                    |
                |                    |
                |          ^         |
                |          |         |
                ......................
                |        heap        |
                ----------------------
                | uninitialized data | initialized to
                |        (bss)       | zero by exec
                ----------------------
                |   initialized data | \
                |       (data)       | |read from 
                ---------------------- |program file
                |                    | |by exec
                |        text        | |
                |                    | /
     low address----------------------

1.Text or Code Segment:
The code segment, also known as a text segment or simply as text, is where a portion of an object file or the corresponding section of the program's virtual address space that contains executable instructions is stored and is generally read-only and fixed size.

2.Data
The .data segment contains any global or static variables which have a pre-defined value and can be modified. That is any variables that are not defined within a function (and thus can be accessed from anywhere) or are defined in a function but are defined as static so they retain their address across subsequent calls. Examples, in C, include:
    int val = 3;
    char string[] = "Hello World";
The values for these variables are initially stored within the read-only memory (typically within .text) and are copied into the .data segment during the start-up routine of the program.

BSS
The BSS segment, also known as uninitialized data, is usually adjacent to the data segment. The BSS segment contains all global variables and static variables that are initialized to zero or do not have explicit initialization in source code. For instance, a variable defined as static int i; would be contained in the BSS segment.

Heap
The heap area commonly begins at the end of the .bss and .data segments and grows to larger addresses from there. The heap area is managed by malloc, calloc, realloc, and free, which may use the brk and sbrk system calls to adjust its size (note that the use of brk/sbrk and a single "heap area" is not required to fulfill the contract of malloc/calloc/realloc/free; they may also be implemented using mmap/munmap to reserve/unreserve potentially non-contiguous regions of virtual memory into the process' virtual address space). The heap area is shared by all threads, shared libraries, and dynamically loaded modules in a process. (where memory leaks)

Stack
The stack area contains the program stack, a LIFO structure, typically located in the higher parts of memory. A "stack pointer" register tracks the top of the stack; it is adjusted each time a value is "pushed" onto the stack. The set of values pushed for one function call is termed a "stack frame". A stack frame consists at minimum of a return address. Automatic variables are also allocated on the stack.
The stack area traditionally adjoined the heap area and they grew towards each other; when the stack pointer met the heap pointer, free memory was exhausted. With large address spaces and virtual memory techniques they tend to be placed more freely, but they still typically grow in a converging direction. On the standard PC x86 architecture the stack grows toward address zero, meaning that more recent items, deeper in the call chain, are at numerically lower addresses and closer to the heap. On
some other architectures it grows the opposite direction.
