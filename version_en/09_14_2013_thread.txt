2013/09/14

1.timer_create - create a POSIX
2.pthread_create - create a new thread - 1. Thread is cheaper than process 2. Threads can share common data, they do not need to use interprocess communication.(This cheapness does not come free - the biggest drawback is that there is no protection between threads.)
3.pthread_join - join with a terminated thread (Wait for thread specified by thread to terminate)
4.pthread_self - obtain ID of the calling thread
5.pthread_cleanup_pop, pthread_cleanup_push - push and pop thread cancellation clean-up handlers.
7.pthread_exit - terminate calling thread

8.make-> makefile   make filenam5e == gcc -o filename filename.c
    vim Makefile vim MAKEFILE 
========================
hello:hello.c
    gcc -o hello hello.c
hello.i:hello.c
    gcc -E hello.c -o hello.i
hello.s:hello.c
    gcc -S hello.c -o hello.s
hello.o:hello.c
    gcc -c hello.c -o hello.o
CFLAGS=-lpthread
========================
hello:hello.c                   - arg1: the argment followed by make command. arg2: source
    gcc -o hello hello.c        - start with a tab, then the real command
CFLAGS used by all the gcc commands, -lpthread - link pthread

9.pthread_mutex_destroy, pthread_mutex_init - destroy  and  initialize  a mutex

10.pthread_mutex_lock, pthread_mutex_trylock, pthread_mutex_unlock -  lock and unlock a mutex

12.pthread_cond_destroy, pthread_cond_init - destroy and initialize condition variables

13.pthread_cond_timedwait, pthread_cond_wait - wait on a condition
