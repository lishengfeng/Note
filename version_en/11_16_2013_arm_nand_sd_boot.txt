2013/11/16
An embedded system is a computer system with a dedicated function within a larger mechanical or electrical system, often with real-time computing constraints. It is embedded as part of a complete device often including hardware and mechanical parts. Embedded systems control many devices in common use today. Ninety-eight percent of all microprocessors are manufactured as components of embedded systems.

System components(Kernel, File system)
    Hardware
        (ios grub)
        grub get permission from bios. initiate hardware, load the kernel
        kernel bind root directory, start systemd, the parent of all processes.
        Start user processes(UNIX programming)
      
Course goal
    According to progamming, manipulate hardware
    1.Load kernel
    2.Drivers

Able to write bootloader

In embeded system, bios grub is called bootloader

You will need to know hardware basics and to understand schematic diagram

We use ARM 1176

SOC System

Display controller/Display control unit - IPU
Memory
USBhost、USBroot 
Serial port - UART
All are put together to reduce volume, power consumption, cost.

Rethat 5 - serial port will use pl2303. 340 cannot be recognized. Ubuntu and Rethat 6 can use both.

USB - Generally, Type A is used for Computer host while type B is used for devices. 

datasheet - manuals

Courses arrangement
1. Exixting system - Image
2. Providing source code - Compile
3. Using manuals - Write source code

Check Cable connection
Note:
    1. It's better to use only one network driver keeping wifi disconnect
    2. Use Birdged network connection if using virtual machine.
    3. Shutdown all the firewalls of windows and linuxe

rpm -aq | grep minicom
if minicome isn't installed, use CD-ROM to install.

minicom configuration
    su - root 
    'minicom -s' to go to configration page. To use minicom, remove the -s parameter.
    Control > Serial port configuration at third place
    A Hardware location e.g. pc:/dev/ttyS0  Laptop:/dev/ttyUSB0 (The number may be changed)
    E bit rate - 115200 8N1 
    F/G Stream - close at the beginning
lock fail means that a minicom commands is running now. Use 'ps -fax' to detect the process id and then kill it.

Development board
    Both swith is upside means SD. Both downside means NAND
    if serial port command loop start, reset board and then type any key to terminal

*** Warning - bad CRC or NAND, using default environment  (This warning is becase bare board hasn't set environment variables.)

COMMAND  All the number here is hexadecimal e.g. 0x500000000 == 50000000
bootm   - boot application image from memory  Generally, this command is use from booting kernel.
go      - start application at address 'addr' Start a application by address (This command cannot start a kernel as it doesn't have parameter)
nand    - NAND sub-system - command use to manipulate NAND(erase or write)
ping    - send ICMP ECHO_REQUEST to network host - ping address (can only know connected or not connected)
reset   - Perform RESET of the CPU - same effect as pressing reset button
tftpboot- boot image via network using TFTP protocol - e.g. tftpboot address filename - From IP -> tftp_server -> file (Download to address)(IP can be obtained by environment varible)
printenv- print environment variables
setenv  - set environment variables
saveenv - save environment variables to persistent storage

#:printenv
bootargs=root=/dev/mtdblock2 rootfstype=cramfs console=ttySAC0,115200 - kernel address
bootcmd=nand read 0xc0008000 0x100000 0x200000;bootm 0xc0008000 - command when booting
bootdelay=3 - boot countdown
baudrate=115200 - bit rate of serial port
haddr=00:40:5c:26:0a:5b  - mac address - (development board doesn't need this, the address can be set. Otherwise you will need to purchase it)
addr=192.168.1.20        - IP address
serverip=192.168.1.10    - Server IP (Should map pc's)
gatewayip=192.168.1.1 
netmask=255.255.255.0
stdin=serial
stdout=serial
stderr=serial

ctrl + a -> w - open line brea

rpm -aq| grep tftp
    make sure tftp is installed
-----------------------------------------
linux 6
cd /myiso
[root@localhost myiso]# mount -o loop RHEL_6.4\ x86_64.iso  /mnt/
[root@localhost myiso]# yum install tftp-server
[root@localhost myiso]# rpm -qa |grep tftp-server

-----------------------------------------
vim /etc/xinetd.d/tftp
    enable it by changing disable value to no
    server_args  - destination(can be modified) Only file in here can be downloaded

 service xinetd restart - Start the service
 netstat -au|grep tftp - Check if tftp was started. Some values were returned means it was running

 ifconfig eth0 192.168.1.10 - modify pc's address (Should be the same with board's serverip)

   setup - shutdown firewall (tab to switch)
   To shutdown selinux - vim /etc/selinux/config - Change first line to SELINUX=disabled. Then reboot 
   su - root -> Use mii-tool command to check if link is ok
--------------------------------
Under Linux 6, mii-tool will need to specify network. e.g.mii-tool eth0
--------------------------------
Check net light is flashing
If network doesn't work, capture package to see what the wrong is.
    
   0x50000000 - 0x57FFFFFF  128M  ----> differ 0x08000000 one 0 in hexadecimal is four zeros in binary which means 8*2^(6*4) = (8*2^4) * 2^10 * 2^10 = 128 * 1024k *1024K = 128M
        0x50000000 - 0x50008000 - configuration location
                     0x57E00000 - grub use the location after this address.
    0x50008000 - 0x57E00000 - kernel will be located in them
 
   0x70000000 - 0x7FFFFFF 256M - stores registers

pc
   tar xvf smdk6410.tar.bz2 
   cd smdk6410 
        datasheet - manuals
        images - images
        rootfs - file system文件系统
        schema - schematic diagram
        src - source code
        tools - tools for writting bootlad to board
    cd images/
    cp zImage /tftpboot/ (newer board will use zIamage_2nd)

arm

    tftp 50008000 zImage  
    bootm 50008000 (Correspoding to downloading memory address) (will failed now as there is no filesyste)

pc
    [root@dba smdk6410]# cd rootfs/
    [root@dba rootfs]# mkdir uplooking
    [root@dba rootfs]# tar xvf rootfs.tar -C uplooking
    [root@dba rootfs]# mv uplooking/ /
    [root@dba /]# chmod 777 uplooking/
    #vim /etc/export - add a new line '/uplooking *(rw,sync,no_root_squash)'  * means it can be mounted to every device.
    #service nfs restart - restart nfs service  or use /etc/init.d/nfs restart  (*Under Ubuntu, the command is nfs-kernel-server*)
    [root@dba /]# mount 192.168.1.10:/uplooking /mnt (check if it can be mounted to your own pc)
    mount - mount a file system or print mount information
----------------------------------------------------------------------------
If nfs is read-only after booting kernel.
mount -o rw,remount - to make it readable and writable
qtopia - gui
To make it automatically mount
    1. go to the root directory
    2. uplooking]#vim etc/init.d/rcS
    3. add 'mount -o rw,remount / /' before /bin/qtopia in last line
----------------------------------------------------------------------------

arm

    setenv bootdelay 5 - temporary
    saveenv

    set bootargs (do not use tab)
    uplooking # setenv bootargs "root=/dev/nfs nfsroot=192.168.1.10:/uplooking ip=192.168.1.20 console=ttySAC0,115200" - (ip is board's ip)
    sav

    Need to redownload kernel as no kernel in memory
    Reboot

    rm /etc/pointercal (Otherwise, touch point will be incorrect)
    Reboot > download kernel > reboot > screen calibration

    setenv bootcmd "tftp 50008000 zImage;bootm 50008000"
    saveenv
-----------------------------------------------

S3C NAND Driver, (c) 2008 Samsung Electronics
S3C NAND Driver is using software ECC.
NAND device: Manufacturer ID: 0xec, Chip ID: 0xda (Samsung NAND 256MiB 3,3V 8-bit)
Creating 4 MTD partitions on "NAND 256MiB 3,3V 8-bit":
0x00000000-0x00040000 : "Bootloader"
0x00040000-0x00400000 : "Kernel"
0x00400000-0x05400000 : "Rootfs"
0x05400000-0x10000000 : "File System"

Information about NAND

arm
    ls /dev/mtdblock* - four blocks


manipulate NAND
    nand erase - erase all nand
    nand erase start_addr size (hexadecimal)
    nand write memory_addr  nand_addr size - Write memory to nand(erase before write)
    nand read memory_addr nand_addr size

    
  [root@dba smdk6410]# cd images/
  [root@dba images]# cp u-boot-nand.bin /tftpboot/

arm
    uplooking # tftp 50000000 u-boot-nand.bin (use this address if there is no kernel)
    uplooking # nand erase 0 40000 (nand information will be printed when booting)(you can erase nand all at the first time)
    uplooking # nand write 50000000 0 40000
    reset       （If ECC error occurs, redo steps begin with download)
    （This problem will happen when using SD card. When using sd card, erase boot information in nand in sdcard when nand is running before changind andy data in nand)
